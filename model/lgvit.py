from einops.layers.torch import Rearrange
import torch
from torch import nn
from configs import lgvit_cfg as cfg
import math
import warnings
from torch.nn.functional import pad as F_pad
from utils.func import input_padding, out_unpadding

def drop_path(x, drop_prob: float = 0., training: bool = False):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).
    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for
    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
    'survival rate' as the argument.
    """
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    # work with diff dim tensors, not just 2D ConvNets
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)
    random_tensor = keep_prob + \
        torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """

    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(nn.Module):
    # two mlp, fc-relu-drop-fc-relu-drop
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.ELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention_Encoder(nn.Module):
    def __init__(self, dim, kv_reduced_dim=None, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0.,
                 proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights
        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

        if kv_reduced_dim is not None and type(kv_reduced_dim) == int:
            self.fc_k = nn.Linear()

    def forward(self, x):
        B, N, C = x.shape
        # qkv shape [3, N, num_head, HW, C//num_head]
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C //
                                  self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]  # [N, num_head, HW, C//num_head]

        attn = (q @ k.transpose(-2, -1)) * self.scale  # [N, num_head, HW, HW]
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C) # [N, num_head,HW, C//num_head] ---> [N, HW, C]
        x = self.proj(x)
        x = self.proj_drop(x)
        return x


class Block_Encoder(nn.Module):

    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention_Encoder(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)
        self.drop_path = DropPath(
            drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim,
                       act_layer=act_layer, drop=drop)

    def forward(self, x):
        x = x + self.drop_path(self.attn(self.norm1(x)))
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x


class VisionTransformer(nn.Module):
    def __init__(self, embed_dim=512, depth=4,
                 num_heads=8, mlp_ratio=4., qkv_bias=False, qk_scale=None,
                 drop_rate=0., attn_drop_rate=0., drop_path_rate=0., norm_layer=nn.LayerNorm):
        super().__init__()

        self.pos_drop = nn.Dropout(p=drop_rate)

        # stochastic depth decay rule
        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]
        self.transformer_encoder = nn.ModuleList([
            Block_Encoder(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer)
            for i in range(depth)])

        self.norm = norm_layer(embed_dim)

        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {'cls_embed'}

    def forward(self, x):

        x = self.pos_drop(x)
        for blk in self.transformer_encoder:
            x = blk(x)

        x = self.norm(x)
        return x


def positionalencoding2d(n_batch, d_model, height, width):
    """
    :param d_model: dimension of the model
    :param height: height of the positions
    :param width: width of the positions
    :return: d_model*height*width position matrix
    """
    if d_model % 4 != 0:
        raise ValueError("Cannot use sin/cos positional encoding with "
                         "odd dimension (got dim={:d})".format(d_model))
    pe = torch.zeros(d_model, height, width)
    # Each dimension use half of d_model
    d_model = int(d_model / 2)
    div_term = torch.exp(torch.arange(0., d_model, 2) *
                         -(math.log(10000.0) / d_model))
    pos_w = torch.arange(0., width).unsqueeze(1)
    pos_h = torch.arange(0., height).unsqueeze(1)
    pe[0:d_model:2, :, :] = torch.sin(
        pos_w * div_term).transpose(0, 1).unsqueeze(1).repeat(1, height, 1)
    pe[1:d_model:2, :, :] = torch.cos(
        pos_w * div_term).transpose(0, 1).unsqueeze(1).repeat(1, height, 1)
    pe[d_model::2, :, :] = torch.sin(
        pos_h * div_term).transpose(0, 1).unsqueeze(2).repeat(1, 1, width)
    pe[d_model + 1::2, :,
        :] = torch.cos(pos_h * div_term).transpose(0, 1).unsqueeze(2).repeat(1, 1, width)
    pe = torch.unsqueeze(pe, 0)
    pe = pe.permute(0, 2, 3, 1)  # [1, height, width, d_model]
    pe = pe.reshape(1, height*width, -1)
    pe = pe.repeat(n_batch, 1, 1)
    return pe.type(cfg.dtype_float).to(cfg.device)


def conv3x3(in_planes: int, out_planes: int, stride: int = 1, groups: int = 1, dilation: int = 1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=dilation, groups=groups, bias=False, dilation=dilation)


def conv1x1(in_planes: int, out_planes: int, stride: int = 1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)

class BasicBlock(nn.Module):

    def __init__(
        self,
        inplanes: int,
        planes: int,
        stride: int = 1,
        groups: int = 1,
        downsample=None,
    ) -> None:
        super(BasicBlock, self).__init__()
        norm_layer = nn.BatchNorm2d
        # Both self.conv1 and self.downsample layers downsample the input when stride != 1
        self.conv1 = conv1x1(inplanes, planes, stride)
        self.bn1 = norm_layer(planes)
        self.relu = nn.ELU(inplace=True)
        self.conv2 = conv1x1(planes, planes, stride=1)
        self.bn2 = norm_layer(planes)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)

        return out

class Vit_local(nn.Module):

    def __init__(self, block_size=cfg.block_size, block_num = cfg.block_num**2, 
                    net_dim=cfg.local_net_dim, net_depth=cfg.net_depth, out_dim=cfg.para_maps):
        super(Vit_local, self).__init__()
        self.block_size = block_size

        self.pos_embedding = positionalencoding2d(block_num, net_dim, block_size, block_size)
        self.transformer = VisionTransformer(
            embed_dim=net_dim, depth=net_depth, num_heads=cfg.local_num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None,)
        self.out_layer = nn.Sequential(
            Rearrange('b (b1 b2) c -> b c b1 b2', b1=block_size, b2=block_size),
            conv1x1(net_dim, out_dim),
            nn.Sigmoid(),
        )

    def forward(self, x):
        '''
        Args:
            x: [batch, height*width, channel]
        Returns:
            out: [batch, out_dim, height, width]
        '''
        x = x + self.pos_embedding
        x = self.transformer(x)
        x = self.out_layer(x)

        return x


class Vit_global(nn.Module):

    def __init__(self, input_dim = cfg.input_dim, block_size=cfg.block_size, 
                block_num = cfg.block_num, net_dim=cfg.local_net_dim, 
                net_depth=cfg.net_depth, out_dim=cfg.para_maps):
        super(Vit_global, self).__init__()
        self.patch_embbeding = nn.Sequential(
            BasicBlock(input_dim, net_dim, stride=1,downsample=nn.Sequential(
                conv1x1(input_dim, net_dim, stride=1),
                nn.BatchNorm2d(net_dim),
            )),
            BasicBlock(net_dim, net_dim, stride=1),
            # Rearrange('b c h w -> b (h w) c', h=block_size, w=block_size),
            Rearrange('b c (h b1) (w b2) -> (b h w) (b1 b2) c', b1=block_size,
                         b2=block_size)
        ) # [block_num**2, block_size**2, net_dim]

        # local vit: [block_num**2, block_size**2, net_dim] -> [block_num**2, out_dim, block_size, block_size]
        self.local_vit = Vit_local(block_size, int(block_num**2), net_dim, net_depth, out_dim) 

        self.to_local_feature = Rearrange('(b h w) c b1 b2 -> b c (h b1) (w b2)', b=1, h=block_num, w=block_num)

        # rearrange: [block_num**2, out_dim, block_size, block_size] -> [batch, block_num**2, out_dim*block_size*block_size]
        self.rearange_feature = Rearrange('(b h w) c b1 b2 -> b (h w) (c b1 b2) ', b=1, h=block_num, w=block_num)
        # gloabal position embedding
        # self.pos_embedding = positionalencoding2d(1, int(out_dim*block_size*block_size), block_num, block_num)
        self.pos_embedding = nn.Parameter(torch.randn(1, block_num**2, int(out_dim*block_size*block_size)))

        self.global_transformer = VisionTransformer(
            embed_dim=int(out_dim*block_size*block_size), depth=net_depth, num_heads=int(out_dim*block_size), mlp_ratio=4., qkv_bias=False, qk_scale=None,)
        # rearrange: [block_num**2, out_dim, block_size, block_size] -> [batch, out_dim, block_num*block_size, block_num*block_size]
        self.to_global_feature = nn.Sequential(Rearrange('b (h w) (c b1 b2) -> b c (h b1) (w b2)', h=block_num, 
                                w=block_num, c=out_dim, b1=block_size, b2=block_size),
                                conv1x1(out_dim, out_dim),
                                nn.Sigmoid(),
        )
        
        self.out_layer = nn.Sequential(
            conv3x3(out_dim*2, out_dim),
        )
    
    def forward(self, x):
        '''
        Args:
            x: [batch, channel, height, width]
        Returns:
            out: [batch, out_dim, height, width]
        ''' 
        # padding
        if len(x.shape) == 3:
            x = x.unsqueeze(0)
        x = input_padding(x) # [batch, channel, height_out, width_out]
        x = self.patch_embbeding(x) # [block_num**2, block_size**2, net_dim]

        x_local = self.local_vit(x) # [block_num**2, out_dim, block_size, block_size]
        local_feature = self.to_local_feature(x_local) # [batch, out_dim, block_num*block_size, block_num*block_size]

        x = self.rearange_feature(x_local) # [batch, block_num**2, out_dim*block_size*block_size]
        x = x + self.pos_embedding
        x = self.global_transformer(x) 
        x_global = self.to_global_feature(x) # [batch, out_dim, block_num*block_size, block_num*block_size]

        # cat local and global feature
        x = torch.cat([x_global, local_feature], dim=1) # [batch, out_dim*2, block_num*block_size, block_num*block_size]
        # feature aggregation
        x = self.out_layer(x)
        # unpadding 
        x = out_unpadding(x)
        return x_local, x
    







